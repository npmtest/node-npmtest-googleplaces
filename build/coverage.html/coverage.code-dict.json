{"/home/travis/build/npmtest/node-npmtest-googleplaces/test.js":"/* istanbul instrument in package npmtest_googleplaces */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-googleplaces/lib.npmtest_googleplaces.js":"/* istanbul instrument in package npmtest_googleplaces */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_googleplaces = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_googleplaces = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-googleplaces/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-googleplaces && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_googleplaces */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_googleplaces\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_googleplaces.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_googleplaces.rollup.js'] =\n            local.assetsDict['/assets.npmtest_googleplaces.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_googleplaces.__dirname + '/lib.npmtest_googleplaces.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/index.js":"(function () {\n    \"use strict\";\n\n    var PlaceSearch = require(\"./lib/PlaceSearch.js\");\n    var RadarSearch = require(\"./lib/RadarSearch.js\");\n    var TextSearch = require(\"./lib/TextSearch.js\");\n    var PlaceDetailsRequest = require(\"./lib/PlaceDetailsRequest.js\");\n    var PlaceAutocomplete = require(\"./lib/PlaceAutocomplete.js\");\n    var AddEvent = require(\"./lib/AddEvent.js\");\n    var DeleteEvent = require(\"./lib/DeleteEvent.js\");\n    var EventDetails = require(\"./lib/EventDetails.js\");\n    var ImageFetch = require(\"./lib/ImageFetch.js\");\n    var NearBySearch = require('./lib/NearBySearch.js');\n\n    module.exports = function (apiKey, outputFormat) {\n        return {\n            placeSearch: new PlaceSearch(apiKey, outputFormat),\n            radarSearch: new RadarSearch(apiKey, outputFormat),\n            textSearch: new TextSearch(apiKey, outputFormat),\n            placeDetailsRequest: new PlaceDetailsRequest(apiKey, outputFormat),\n            placeAutocomplete: new PlaceAutocomplete(apiKey, outputFormat),\n            addEvent: new AddEvent(apiKey, outputFormat),\n            deleteEvent: new DeleteEvent(apiKey, outputFormat),\n            eventDetails: new EventDetails(apiKey, outputFormat),\n            imageFetch: new ImageFetch(apiKey),\n            nearBySearch: new NearBySearch(apiKey, outputFormat)\n\n        };\n    };\n\n})();\n\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/lib/PlaceSearch.js":"(function () {\n    \"use strict\";\n\n    var querystring = require(\"querystring\");\n    var https = require(\"https\");\n\n    var HttpResponseProcessor = require(\"./HttpResponseProcessor.js\");\n    var validate = require(\"./validate.js\");\n\n    module.exports = function (apiKey, outputFormat) {\n        return function (parameters, callback) {\n            validate.apiKey(apiKey);\n            validate.outputFormat(outputFormat);\n            parameters.key = apiKey;\n            parameters.location = parameters.location || \"-33.8670522,151.1957362\";\n            if (typeof parameters.location === \"object\") parameters.location = parameters.location.toString();\n            if (!parameters.rankby) parameters.radius = parameters.radius || 500;\n            parameters.sensor = parameters.sensor || false;\n            var options = {\n                hostname: \"maps.googleapis.com\",\n                path: \"/maps/api/place/search/\" + outputFormat + \"?\" + querystring.stringify(parameters)\n            };\n            var request = https.request(options, new HttpResponseProcessor(outputFormat === \"json\", callback));\n            request.on(\"error\", function (error) {\n                callback(new Error(error));\n            });\n            request.end();\n        };\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/lib/HttpResponseProcessor.js":"(function () {\n    \"use strict\";\n\n    /**\n     * Merge the data chunks of response and pass to callback\n     *\n     * @param parseJson\n     * @param callback\n     * @return {Function}\n     */\n    module.exports = function (parseJson, callback) {\n        return function (response) {\n            var responseData = \"\";\n            response.setEncoding(\"utf8\");\n            response.on(\"data\", function (chunk) {\n                responseData += chunk;\n            });\n            response.on(\"end\", function () {\n                if (parseJson) responseData = JSON.parse(responseData);\n                callback(null, responseData);\n            });\n        };\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/lib/validate.js":"(function () {\n    \"use strict\";\n\n    exports.apiKey = function (apiKey) {\n        if (!apiKey) callback(new Error(\"apiKey must not be null\"));\n    };\n\n    exports.outputFormat = function (outputFormat) {\n        var validFormats = [\"json\", \"xml\"];\n        if (validFormats.indexOf(outputFormat) === -1)  callback(new Error(\"outputFormat must be 'json' or 'xml'\"));\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/lib/RadarSearch.js":"(function () {\n    \"use strict\";\n\n    var querystring = require(\"querystring\");\n    var https = require(\"https\");\n\n    var HttpResponseProcessor = require(\"./HttpResponseProcessor.js\");\n    var validate = require(\"./validate.js\");\n\n    module.exports = function (apiKey, outputFormat) {\n        return function (parameters, callback) {\n            validate.apiKey(apiKey);\n            validate.outputFormat(outputFormat);\n            parameters.key = apiKey;\n            parameters.location = parameters.location || \"-33.8670522,151.1957362\";\n            if (typeof parameters.location === \"object\") parameters.location = parameters.location.toString();\n            parameters.radius = parameters.radius || 500;\n            parameters.sensor = parameters.sensor || false;\n            var options = {\n                hostname: \"maps.googleapis.com\",\n                path: \"/maps/api/place/radarsearch/\" + outputFormat + \"?\" + querystring.stringify(parameters)\n            };\n            var request = https.request(options, new HttpResponseProcessor(outputFormat === \"json\", callback));\n            request.on(\"error\", function (error) {\n                callback(new Error(error));\n            });\n            request.end();\n        };\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/lib/TextSearch.js":"(function () {\n    \"use strict\";\n\n    var querystring = require(\"querystring\");\n    var https = require(\"https\");\n\n    var HttpResponseProcessor = require(\"./HttpResponseProcessor.js\");\n    var validate = require(\"./validate.js\");\n\n    module.exports = function (apiKey, outputFormat) {\n        return function (parameters, callback) {\n            validate.apiKey(apiKey);\n            validate.outputFormat(outputFormat);\n            parameters.key = apiKey;\n            parameters.query = parameters.query || \"restaurant\";\n            parameters.sensor = parameters.sensor || false;\n            if (typeof parameters.location === \"object\") parameters.location = parameters.location.toString();\n            var options = {\n                hostname: \"maps.googleapis.com\",\n                path: \"/maps/api/place/textsearch/\" + outputFormat + \"?\" + querystring.stringify(parameters)\n            };\n            var request = https.request(options, new HttpResponseProcessor(outputFormat === \"json\", callback));\n            request.on(\"error\", function (error) {\n                callback(new Error(error));\n            });\n            request.end();\n        };\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/lib/PlaceDetailsRequest.js":"(function () {\n    \"use strict\";\n\n    var querystring = require(\"querystring\");\n    var https = require(\"https\");\n\n    var HttpResponseProcessor = require(\"./HttpResponseProcessor.js\");\n    var validate = require(\"./validate.js\");\n\n    module.exports = function (apiKey, outputFormat) {\n        return function (parameters, callback) {\n            validate.apiKey(apiKey);\n            validate.outputFormat(outputFormat);\n            parameters.key = apiKey;\n            parameters.sensor = parameters.sensor || false;\n            if (!parameters.reference && !parameters.placeid) callback(new Error(\"Place reference or placeid is required\"));\n            var options = {\n                hostname: \"maps.googleapis.com\",\n                path: \"/maps/api/place/details/\" + outputFormat + \"?\" + querystring.stringify(parameters)\n            };\n            var request = https.request(options, new HttpResponseProcessor(outputFormat === \"json\", callback));\n            request.on(\"error\", function (error) {\n                callback(new Error(error));\n            });\n            request.end();\n        };\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/lib/PlaceAutocomplete.js":"(function () {\n    \"use strict\";\n\n    var querystring = require(\"querystring\");\n    var https = require(\"https\");\n\n    var HttpResponseProcessor = require(\"./HttpResponseProcessor.js\");\n    var validate = require(\"./validate.js\");\n\n    module.exports = function (apiKey, outputFormat) {\n        return function (parameters, callback) {\n            validate.apiKey(apiKey);\n            validate.outputFormat(outputFormat);\n            //Required parameters\n            parameters.key = apiKey;\n            parameters.input = parameters.input || 'sydney lyr';\n\n            if (typeof parameters.location === \"object\") parameters.location = parameters.location.toString();\n\n            var options = {\n                hostname: \"maps.googleapis.com\",\n                path: \"/maps/api/place/autocomplete/\" + outputFormat + \"?\" + querystring.stringify(parameters)\n            };\n            var request = https.request(options, new HttpResponseProcessor(outputFormat === \"json\", callback));\n            request.on(\"error\", function (error) {\n                callback(new Error(error));\n            });\n            request.end();\n        };\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/lib/AddEvent.js":"(function () {\n    \"use strict\";\n\n    var querystring = require(\"querystring\");\n    var https = require(\"https\");\n\n    var HttpResponseProcessor = require(\"./HttpResponseProcessor.js\");\n    var validate = require(\"./validate.js\");\n\n    module.exports = function (apiKey, outputFormat) {\n        return function (parameters, callback) {\n            validate.apiKey(apiKey);\n            validate.outputFormat(outputFormat);\n\n            var url_params = {\n                key: apiKey,\n                sensor: parameters.sensor || false\n            };\n\n            delete parameters.sensor;\n\n            if (!parameters.duration) callback(new Error(\"Event duration is required\"));\n            if (parseInt(parameters.duration) !== parameters.duration) callback(new Error(\"Event duration must be an integer\"));\n            if (!parameters.summary) callback(new Error(\"Event summary is required\"));\n            if (!parameters.reference) callback(new Error(\"Place reference is required\"));\n            var options = {\n                method: \"POST\",\n                hostname: \"maps.googleapis.com\",\n                path: \"/maps/api/place/event/add/\" + outputFormat + \"?\" + querystring.stringify(url_params)\n            };\n\n            var request = https.request(options, new HttpResponseProcessor(outputFormat === \"json\", callback));\n            request.on(\"error\", function (error) {\n                callback(new Error(error));\n            });\n\n            request.write(JSON.stringify(parameters));\n            request.end();\n        };\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/lib/DeleteEvent.js":"(function () {\n    \"use strict\";\n\n    var querystring = require(\"querystring\");\n    var https = require(\"https\");\n\n    var HttpResponseProcessor = require(\"./HttpResponseProcessor.js\");\n    var validate = require(\"./validate.js\");\n\n    module.exports = function (apiKey, outputFormat) {\n        return function (parameters, callback) {\n            validate.apiKey(apiKey);\n            validate.outputFormat(outputFormat);\n\n            var url_params = {\n                key: apiKey,\n                sensor: parameters.sensor || false\n            };\n\n            delete parameters.sensor;\n\n            if (!parameters.event_id) callback(new Error(\"event_id is required\"));\n            if (!parameters.reference) callback(new Error(\"Place reference is required\"));\n            var options = {\n                method: \"POST\",\n                hostname: \"maps.googleapis.com\",\n                path: \"/maps/api/place/event/delete/\" + outputFormat + \"?\" + querystring.stringify(url_params)\n            };\n\n            var request = https.request(options, new HttpResponseProcessor(outputFormat === \"json\", callback));\n            request.on(\"error\", function (error) {\n                callback(new Error(error));\n            });\n\n            request.write(JSON.stringify(parameters));\n            request.end();\n        };\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/lib/EventDetails.js":"(function () {\n    \"use strict\";\n\n    var querystring = require(\"querystring\");\n    var https = require(\"https\");\n\n    var HttpResponseProcessor = require(\"./HttpResponseProcessor.js\");\n    var validate = require(\"./validate.js\");\n\n    module.exports = function (apiKey, outputFormat) {\n        return function (parameters, callback) {\n            validate.apiKey(apiKey);\n            validate.outputFormat(outputFormat);\n            parameters.key = apiKey;\n            parameters.sensor = parameters.sensor || false;\n            if (!parameters.event_id) callback(new Error(\"event_id is required\"));\n            if (!parameters.reference) callback(new Error(\"Place reference is required\"));\n            var options = {\n                hostname: \"maps.googleapis.com\",\n                path: \"/maps/api/place/event/details/\" + outputFormat + \"?\" + querystring.stringify(parameters)\n            };\n\n            var request = https.request(options, new HttpResponseProcessor(outputFormat === \"json\", callback));\n            request.on(\"error\", function (error) {\n                callback(new Error(error));\n            });\n\n            request.end();\n        };\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/lib/ImageFetch.js":"(function() {\n  \"use strict\";\n  var querystring = require(\"querystring\");\n  var https = require(\"https\");\n\n  var GoogleImageResponseProcessor = require(\"./GoogleImageResponseProcessor.js\");\n  var validate = require(\"./validate.js\");\n  module.exports = function (apiKey) {\n    return function (parameters, callback) {\n      validate.apiKey(apiKey);\n      parameters.maxwidth = parameters.maxwidth || 400;\n      parameters.photoreference = parameters.photoreference || \"\";\n      parameters.sensor = parameters.sensor || false;\n      parameters.key = apiKey;\n      \n      var options = {\n        hostname:\"maps.googleapis.com\",\n        path:\"/maps/api/place/photo\" + \"?\" + querystring.stringify(parameters),\n        method: \"GET\"\n      };\n      var request = https.request(options, new GoogleImageResponseProcessor(callback));\n      request.on(\"error\", function (error) {\n       callback(new Error(error));\n      });\n      request.end();\n    };\n  };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/lib/GoogleImageResponseProcessor.js":"(function() {\n  \"use strict\";\n  module.exports = function (callback) {\n    return function (response) {\n      var responseData = \"\";\n      response.on(\"data\", function (chunk) {\n        if (response.headers['location']) {\n          responseData = response.headers['location'];\n          callback(null, responseData);\n        }\n      });\n    };\n  };\n})();\n","/home/travis/build/npmtest/node-npmtest-googleplaces/node_modules/googleplaces/lib/NearBySearch.js":"(function () {\n    \"use strict\";\n\n    var querystring = require(\"querystring\");\n    var https = require(\"https\");\n\n    var HttpResponseProcessor = require(\"./HttpResponseProcessor.js\");\n    var validate = require(\"./validate.js\");\n\n    module.exports = function (apiKey, outputFormat) {\n        return function (parameters, callback) {\n            validate.apiKey(apiKey);\n            validate.outputFormat(outputFormat);\n            parameters.key = apiKey;\n            parameters.location = parameters.location || \"-33.8670522,151.1957362\";\n            if (typeof parameters.location === \"object\") parameters.location = parameters.location.toString();\n            if (!parameters.rankby) parameters.radius = parameters.radius || 500;\n\n            var options = {\n                hostname: \"maps.googleapis.com\",\n                path: \"/maps/api/place/nearbysearch/\" + outputFormat + \"?\" + querystring.stringify(parameters)\n            };\n            var request = https.request(options, new HttpResponseProcessor(outputFormat === \"json\", callback));\n            request.on(\"error\", function (error) {\n                callback(new Error(error));\n            });\n            request.end();\n        };\n    };\n\n})();\n"}